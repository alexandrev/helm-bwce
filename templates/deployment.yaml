apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    meta.helm.sh/chart:  "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ template "fullname" . }}
    tibco.com/technology: "bwce"       
    {{- with .Values.labels }}
      {{- range $key, $value := . }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
    {{- end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "fullname" . }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
{{- if .Values.hashicorp.enabled }}
  {{- if .Values.hashicorp.inject.enabled }}
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/role: {{ .Values.hashicorp.inject.role }}
       {{- range .Values.hashicorp.inject.secrets}}
        vault.hashicorp.com/agent-inject-secret-{{ .path }}: {{ .name }}
       {{- if .template }}
        vault.hashicorp.com/agent-inject-template-{{ .path }}: {{ toYaml .template | indent 10}}
       {{- end }}
       {{- end }}


  {{- end }}
{{- end }}
      labels:
        helm.sh/chart:  "{{ .Chart.Name }}"
        app : {{ template "fullname" . }}
        app.kubernetes.io/name: {{ template "fullname" . }}
        tibco.com/technology: "bwce"
      {{- with .Values.labels }}
        {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
{{- if .Values.annotations }}
      annotations:
{{ toYaml .Values.annotations | indent 8 }}
{{- end }}
    spec:
      securityContext: 
        runAsUser: {{ $.Values.securityContext.runAsUser }}
        fsGroup: {{ $.Values.securityContext.fsGroup }}
      imagePullSecrets:
      - name: {{ .Values.image.imagePullSecrets }}
{{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName  }}
{{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.imageName }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.bwce.configmap.enabled }}
        envFrom:
        - configMapRef:
        {{- if .Values.bwce.configmap.name }}
            name: {{ .Values.bwce.configmap.name }}
        {{- else }}
            name: {{ .Release.Name }}-config
        {{- end }}
        env:
{{- else }}
        env:
{{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
{{- end }}
{{- end }}

{{- if .Values.hashicorp.enabled }}

        - name: HASHICORP_VAULT_ADDR
          value: {{ .Values.hashicorp.url }}
        - name: HASHICORP_VAULT_AUTH
          value: {{ .Values.hashicorp.auth.type }}
        - name: VAULT_AUTH_PATH
          value: {{ .Values.hashicorp.path }}
{{- if  .Values.hashicorp.kv.version}}
        - name: HASHICORP_VAULT_KV_VERSION
          value: {{ .Values.hashicorp.kv.version | quote }}
{{- end }}

{{- if  .Values.hashicorp.namespace}}
        - name: HASHICORP_VAULT_NAMESPACE
          value: {{ .Values.hashicorp.namespace }}
{{- end }}

{{- if  .Values.hashicorp.auth.path}}
        - name: HASHICORP_AUTH_PATH
          value: {{ .Values.hashicorp.auth.path}}
{{- end }}

{{- if  .Values.hashicorp.cacert}}
        - name: HASHICORP_CACERT
          value: {{ .Values.hashicorp.cacert }}
{{- end }}


{{- if eq "token" .Values.hashicorp.auth.type }}
        - name: HASHICORP_VAULT_TOKEN
          value: {{ .Values.hashicorp.auth.token }}
{{- end }}

{{- if eq "approle" .Values.hashicorp.auth.type }}
        - name: HASHICORP_VAULT_ROLE_ID
          value: {{ .Values.hashicorp.auth.roleId }}
        - name: HASHICORP_VAULT_SECRET_ID
          value: {{ .Values.hashicorp.auth.secretId }}
{{- end }}

{{- if eq "userpass" .Values.hashicorp.auth.type }}

        - name: HASHICORP_VAULT_USERNAME
          value: {{ .Values.hashicorp.auth.username}}
        - name: HASHICORP_VAULT_PASSWORD
          value: {{ .Values.hashicorp.auth.password}}
{{- end }}

{{- end }}
        - name: BW_LOGLEVEL
          value: {{ .Values.bwce.log.level }}
        - name: BW_PROFILE
          value: {{ .Values.bwce.bwprofile | quote }}
        - name: APP_CONFIG_PROFILE
          value: {{ .Values.bwce.configprofile | quote }}

{{- if .Values.bwce.monitoring.enabled }}
        - name: BW_PROMETHEUS_ENABLE
          value: "TRUE"
{{- end }}

{{- if .Values.bwce.opentracing.enabled }}
        - name: BW_JAVA_OPTS
          value: "{{printf "%s %s"  .Values.bwce.jvm.javaopts .Values.bwce.opentracing.javaopts }}"
{{- else}}
        - name: BW_JAVA_OPTS
          value: "{{ .Values.bwce.jvm.javaopts}}"
{{- end }}
        - name: BW_JAVA_GC_OPTS
          value: {{ .Values.bwce.jvm.javagcopts | quote }}
        - name: BW_LOG_FORMAT
          value:  {{ .Values.bwce.log.format | quote }}
{{- if .Values.bwce.opentracing.enabled }}        
        - name: JAEGER_SERVICE_NAME
          value: {{ .Chart.Name }}
        - name: JAEGER_AGENT_HOST   # NOTE: Point to the Agent daemon on the Node
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: JAEGER_SAMPLER_MANAGER_HOST_PORT
          value: $(JAEGER_AGENT_HOST):5778
        - name: JAEGER_AGENT_PORT
          value: "6831"
{{- end }}
        ports:
        - containerPort: {{ .Values.service.port }}
        livenessProbe:
          httpGet:
            path: {{ .Values.probePath.httpGet }}
            port: {{ .Values.probePath.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.probePath.httpGet }}
            port: {{ .Values.probePath.port }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        securityContext: 
          runAsUser: {{ $.Values.securityContext.runAsUser }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- if .Values.hpa.enabled }}
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: {{ template "fullname" . }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name:  {{ template "fullname" . }}
  minReplicas: {{ .Values.hpa.minReplica }}
  maxReplicas: {{ .Values.hpa.maxReplica }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: {{ .Values.hpa.targetAverageUtilization }}
{{- end }}